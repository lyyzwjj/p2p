<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wolfcode.p2p.business.mapper.MoneyWithdrawMapper" >
  <resultMap id="BaseResultMap" type="cn.wolfcode.p2p.business.domain.MoneyWithdraw" >
    <id column="id" property="id" />
    <result column="moneyAmount" property="moneyAmount" />
    <result column="fee" property="fee" />
    <result column="bankName" property="bankName" />
    <result column="accountNumber" property="accountNumber" />
    <result column="bankForkName" property="bankForkName" />
    <result column="accountName" property="accountName" />
    <result column="state" property="state" />
    <result column="remark" property="remark" />
    <result column="auditTime" property="auditTime" />
    <result column="applyTime" property="applyTime" />
    <association property="auditor" javaType="cn.wolfcode.p2p.base.domain.LoginInfo" columnPrefix="aud_"
                 resultMap="cn.wolfcode.p2p.base.mapper.LoginInfoMapper.SmallResultMap">
    </association>
    <association property="applier" javaType="cn.wolfcode.p2p.base.domain.LoginInfo" columnPrefix="app_"
                 resultMap="cn.wolfcode.p2p.base.mapper.LoginInfoMapper.SmallResultMap">
    </association>
    
  </resultMap>
  <insert id="insert" useGeneratedKeys="true" keyProperty="id">
    insert into moneywithdraw (moneyAmount, fee, bankName, accountNumber, bankForkName, accountName, 
      state, remark, auditTime, applyTime, auditor_id, applier_id)
    values (#{moneyAmount}, #{fee}, #{bankName}, #{accountNumber}, #{bankForkName}, #{accountName}, 
      #{state}, #{remark}, #{auditTime}, #{applyTime}, #{auditor.id}, #{applier.id})
  </insert>
  <update id="updateByPrimaryKey">
    update moneywithdraw
    set moneyAmount = #{moneyAmount},
      fee = #{fee},
      bankName = #{bankName},
      accountNumber = #{accountNumber},
      bankForkName = #{bankForkName},
      accountName = #{accountName},
      state = #{state},
      remark = #{remark},
      auditTime = #{auditTime},
      applyTime = #{applyTime},
      auditor_id = #{auditor.id},
      applier_id = #{applier.id}
    where id = #{id}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap">
    select mw.id, moneyAmount, fee, bankName, accountNumber, bankForkName, accountName, 
    mw.state, remark, auditTime, applyTime, 
    aud.id aud_id, aud.username aud_username,
    app.id app_id, app.username app_username
    from moneywithdraw mw
    left join loginInfo aud on mw.auditor_id = aud.id
	join loginInfo app on mw.applier_id = app.id
    where mw.id = #{id}
  </select>
  <select id="queryData" resultMap="BaseResultMap">
    select mw.id, moneyAmount, fee, bankName, accountNumber, bankForkName, accountName, 
    mw.state, remark, auditTime, applyTime, 
    aud.id aud_id, aud.username aud_username,
    app.id app_id, app.username app_username
    from moneywithdraw mw
    left join loginInfo aud on mw.auditor_id = aud.id
	join loginInfo app on mw.applier_id = app.id
    <where>
      <if test="beginDate != null">
        and aw.applyTime >= #{beginDate}
      </if>
      <if test="endDate != null">
        <![CDATA[ and aw.applyTime <= #{endDate} ]]>
      </if>
      <if test="state > -1">
        and aw.state = #{state}
      </if>
      </where>
  </select>
</mapper>