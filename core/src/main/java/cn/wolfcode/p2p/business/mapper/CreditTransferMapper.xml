<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wolfcode.p2p.business.mapper.CreditTransferMapper">
    <resultMap id="BaseResultMap" type="cn.wolfcode.p2p.business.domain.CreditTransfer">
        <id column="id" property="id"/>
        <result column="version" property="version"/>
        <result column="bidId" property="bidId"/>
        <result column="bidRequestId" property="bidRequestId"/>
        <result column="bidRequestAmount" property="bidRequestAmount"/>
        <result column="currentRate" property="currentRate"/>
        <result column="returnType" property="returnType"/>
        <result column="monthIndex" property="monthIndex"/>
        <result column="remainMonthIndex" property="remainMonthIndex"/>
        <result column="remainInterest" property="remainInterest"/>
        <result column="closestDeadLine" property="closestDeadLine"/>
        <result column="bidRequestTitle" property="bidRequestTitle"/>
        <result column="bidRequestState" property="bidRequestState"/>
        <result column="transDate" property="transDate"/>
        <association property="transTo" javaType="cn.wolfcode.p2p.base.domain.LoginInfo" columnPrefix="tt_"
                     resultMap="cn.wolfcode.p2p.base.mapper.LoginInfoMapper.SmallResultMap">
        </association>
        <association property="transFrom" javaType="cn.wolfcode.p2p.base.domain.LoginInfo" columnPrefix="tf_"
                     resultMap="cn.wolfcode.p2p.base.mapper.LoginInfoMapper.SmallResultMap">
        </association>
    </resultMap>
    <insert id="insert" keyProperty="id" parameterType="cn.wolfcode.p2p.business.domain.CreditTransfer"
            useGeneratedKeys="true">
    insert into credittransfer (version, bidRequestId, bidRequestAmount, currentRate, returnType,
      monthIndex, remainMonthIndex, remainInterest, closestDeadLine, bidRequestTitle,bidId,
      bidRequestState,transFromId )
    values (0, #{bidRequestId}, #{bidRequestAmount}, #{currentRate}, #{returnType},
      #{monthIndex}, #{remainMonthIndex}, #{remainInterest}, #{closestDeadLine}, #{bidRequestTitle}, #{bidId},
      #{bidRequestState}, #{transFrom.id})
  </insert>
    <update id="updateByPrimaryKey" parameterType="cn.wolfcode.p2p.business.domain.CreditTransfer">
    update credittransfer
    set version = version + 1,
      bidId = #{bidId},
      bidRequestId = #{bidRequestId},
      bidRequestAmount = #{bidRequestAmount},
      currentRate = #{currentRate},
      returnType = #{returnType},
      monthIndex = #{monthIndex},
      remainMonthIndex = #{remainMonthIndex},
      remainInterest = #{remainInterest},
      closestDeadLine = #{closestDeadLine},
      bidRequestTitle = #{bidRequestTitle},
      bidRequestState = #{bidRequestState},
      transFromId = #{transFrom.id},
      transToId = #{transTo.id},
      transDate = #{transDate}
    where id = #{id} and version = #{version}
  </update>
    <update id="changePaymentScheduleDetailTransState">
        update paymentscheduledetail
        set intrans = #{intrans}
        where bid_id = #{bidId} and payDate is null
    </update>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select ct.id, version, bidRequestId, bidRequestAmount, currentRate, returnType, monthIndex,
    remainMonthIndex, remainInterest, closestDeadLine, bidRequestTitle, bidRequestState, 
    bidId, transDate,
    tt.id tt_id, tt.username tt_username,
    tf.id tf_id, tf.username tf_username
    from credittransfer ct
    left join loginInfo tt on ct.transToId = tt.id
	join loginInfo tf on ct.transFromId = tf.id
    where ct.id = #{id}
  </select>
    <select id="ListCanTransferCredit" resultMap="BaseResultMap">
       select t.*, br.title bidRequestTitle,br.currentRate
        FROM
        (select psd.bid_id bidId,psd.bidRequest_id bidRequestId,count(psd.id) remainMonthIndex,sum(psd.principal) bidRequestAmount,
        min(psd.deadLine) closestDeadLine,sum(psd.interest) remainInterest
        from paymentscheduledetail psd
        where investorId = #{userId} and psd.paydate is null and psd.intrans = 0
        group by psd.bid_id,psd.bidRequest_id) t join bidrequest br on t.bidRequestId = br.id
    </select>
    <select id="ListReadyTransferCredit" resultMap="BaseResultMap">
        select t.*, br.title bidRequestTitle,br.currentRate,br.bidRequestState
        FROM
        (select psd.bid_id bidId,psd.bidRequest_id bidRequestId,count(psd.id) remainMonthIndex,sum(psd.principal)
        bidRequestAmount,
        psd.returnType returnType,psd.monthIndex,
        min(psd.deadLine) closestDeadLine,sum(psd.interest) remainInterest
        from paymentscheduledetail psd
        where investorId = #{userId} and psd.paydate is null and psd.intrans = 0
        <if test="bidId != null">
            and psd.bid_id in
            <foreach collection="bidId" open="(" item="item" separator="," close=")">
                #{item}
            </foreach>
        </if>
        group by psd.bid_id,psd.bidRequest_id) t join bidrequest br on t.bidRequestId = br.id
    </select>
    <select id="findNeedCancel" resultMap="BaseResultMap">
        select ct.id, version, bidRequestId, bidRequestAmount, currentRate, returnType, monthIndex,
        remainMonthIndex, remainInterest, closestDeadLine, bidRequestTitle, bidRequestState,
        bidId, transDate,
        tt.id tt_id, tt.username tt_username,
        tf.id tf_id, tf.username tf_username
        from credittransfer ct
        left join loginInfo tt on ct.transToId = tt.id
	          join loginInfo tf on ct.transFromId = tf.id
	    where bidId = #{bidId} and ct.bidRequestState = 2
    </select>
    <select id="queryData" resultMap="BaseResultMap">
        select ct.id, version, bidRequestId, bidRequestAmount, currentRate, returnType, monthIndex,
        remainMonthIndex, remainInterest, closestDeadLine, bidRequestTitle, bidRequestState,
        bidId, transDate,
        tt.id tt_id, tt.username tt_username,
        tf.id tf_id, tf.username tf_username
        from credittransfer ct
        left join loginInfo tt on ct.transToId = tt.id
	          join loginInfo tf on ct.transFromId = tf.id
	    where bidRequestState = #{state}
    </select>

</mapper>