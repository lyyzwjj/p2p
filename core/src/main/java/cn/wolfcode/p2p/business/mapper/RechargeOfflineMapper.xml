<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wolfcode.p2p.business.mapper.RechargeOfflineMapper" >
  <resultMap id="BaseResultMap" type="cn.wolfcode.p2p.business.domain.RechargeOffline" >
    <id column="id" property="id" />
    <result column="bankInfo_id" property="bankInfo_id" />
    <result column="tradeCode" property="tradeCode" />
    <result column="rechargeDate" property="rechargeDate" />
    <result column="amount" property="amount" />
    <result column="note" property="note" />
    <result column="state" property="state" />
    <result column="remark" property="remark" />
    <result column="auditTime" property="auditTime" />
    <result column="applyTime" property="applyTime" />
    <association property="bankInfo" javaType="cn.wolfcode.p2p.business.domain.PlatformBankInfo" columnPrefix="pi_"
    		resultMap="cn.wolfcode.p2p.business.mapper.PlatformBankInfoMapper.SmallResultMap">
    </association>
    <association property="auditor" javaType="cn.wolfcode.p2p.base.domain.LoginInfo" columnPrefix="aud_"
                 resultMap="cn.wolfcode.p2p.base.mapper.LoginInfoMapper.SmallResultMap">
    </association>
    <association property="applier" javaType="cn.wolfcode.p2p.base.domain.LoginInfo" columnPrefix="app_"
                 resultMap="cn.wolfcode.p2p.base.mapper.LoginInfoMapper.SmallResultMap">
    </association>
  </resultMap>
  <insert id="insert" parameterType="cn.wolfcode.p2p.business.domain.RechargeOffline" useGeneratedKeys="true" keyProperty="id" >
    insert into rechargeoffline (bankInfo_id, tradeCode, rechargeDate, amount, note, state, 
      remark, auditTime, applyTime, auditor_id, applier_id)
    values (#{bankInfo.id}, #{tradeCode}, #{rechargeDate}, #{amount}, #{note}, #{state}, 
      #{remark}, #{auditTime}, #{applyTime}, #{auditor.id}, #{applier.id})
  </insert>
  <update id="updateByPrimaryKey" parameterType="cn.wolfcode.p2p.business.domain.RechargeOffline" >
    update rechargeoffline
    set bankInfo_id = #{bankInfo.id},
      tradeCode = #{tradeCode},
      rechargeDate = #{rechargeDate},
      amount = #{amount},
      note = #{note},
      state = #{state},
      remark = #{remark},
      auditTime = #{auditTime},
      applyTime = #{applyTime},
      auditor_id = #{auditor.id},
      applier_id = #{applier.id}
    where id = #{id}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select r.id, tradeCode, rechargeDate, amount, note, r.state, remark, auditTime, 
    applyTime,
    aud.id aud_id, aud.username aud_username,
    app.id app_id, app.username app_username,
    pi.id pi_id, pi.bankName pi_bankName,
    pi.accountNumber pi_accountNumber, pi.bankForkName pi_bankForkName
    from rechargeoffline r
    left join loginInfo aud on r.auditor_id = aud.id
	join loginInfo app on r.applier_id = app.id
	join platformbankinfo pi on  r.bankInfo_id = pi.id
    where r.id = #{id}
  </select>
  <select id="queryData" resultMap="BaseResultMap">
  	select r.id, tradeCode, rechargeDate, amount, note, r.state, remark, auditTime, 
    applyTime,
    aud.id aud_id, aud.username aud_username,
    app.id app_id, app.username app_username,
    pi.id pi_id, pi.bankName pi_bankName,
     pi.accountNumber pi_accountNumber, pi.bankForkName pi_bankForkName
    from rechargeoffline r
    left join loginInfo aud on r.auditor_id = aud.id
	join loginInfo app on r.applier_id = app.id
	join platformbankinfo pi on  r.bankInfo_id = pi.id
	<where>
		<if test="beginDate != null">
        and r.rechargeDate >= #{beginDate}
      </if>
      <if test="endDate != null">
        <![CDATA[ and r.rechargeDate <= #{endDate} ]]>
      </if>
      <if test="state > -1">
        and r.state = #{state}
      </if>
      <if test="tradeCode != null">
      and tradeCode = #{tradeCode}
      </if>
      <if test="bankInfoId != null">
      and bankInfo_Id = #{bankInfoId}
      </if>
	</where>
  </select>
</mapper>